# peltak configuration file
# See https://github.com/novopl/peltak for more information.
pelconf_version: '0'

# General project settings - used by many commands
src_dir: 'src'
src_path: 'src/peltak'
build_dir: '.build'
version_file: 'src/peltak/__init__.py'

# A list of py modules with commands that should be available for the project.
commands:
  - peltak.commands.docs
  - peltak.commands.git
  - peltak.commands.lint
  - peltak.commands.test
  - peltak.commands.version
  - peltak.extra.changelog
  - peltak.extra.gitflow
  - peltak.extra.pypi
  - peltak.extra.scripts

# Configure what gets deleted when running `peltak clean`
clean:
  exclude:
    - ".tox"
    - ".venv"


# Configure your docker registry and images within the project
docker:
  registry: docker.novocode.net


# Configure linting tools and paths
lint:
  tools:
    - pep8
    - pylint
  paths:
    - src/peltak
    - src/peltak_appengine
    - src/peltak_django
    - test/unit


# Configure how documentation is generated (src files for reference docs, etc).
docs:
  reference:
    - src/peltak

# Tests configuration
test:
  types:
    default:
      paths:
        - test/unit


# Custom scripts
scripts:
  build-docs:
    about: Generate sphinx documentation
    command: |
      sphinx-refdoc  \
          -i {{ conf.src_path }} \
          {{ opts.verbose | count_flag('v') }} \
          -o docs/ref; \
          \
      sphinx-build \
          -b html \
          -d {{ conf.build_dir }}/docs \
          docs docs/html

  unit-tests:
    about: Run unit tests
    command: pytest \
          -c ops/tools/pytest.ini \
          --cov-config=ops/tools/coverage.ini \
          --cov={{ conf.src_path }} \
          --cov-report=term \
          --cov-report=html:{{ conf.build_dir }}/coverage \
          test/unit

  checks:
    about: Run checks on the code base
    accept_files: true
    command: |
      echo "{{ 'mypy' | section }}"
      pipenv run mypy {{ files | wrap_paths }};

      echo "{{ 'pep8' | section }}"
      pipenv run pep8 --config ops/tools/pep8.ini {{ files | wrap_paths }};

      echo "{{ 'pylint' | section }}"
      pipenv run pylint --rcfile ops/tools/pylint.ini {{ opts.paths | wrap_paths }};
