# peltak configuration file
# See https://github.com/novopl/peltak for more information.
pelconf_version: '0'

# General project settings - used by many commands
src_dir: 'src'
src_path: 'src/peltak'
build_dir: '.build'
version_file: 'src/peltak/__init__.py'

# A list of py modules with commands that should be available for the project.
commands:
  - peltak.extra.changelog
  - peltak.extra.git
  - peltak.extra.gitflow
  - peltak.extra.pypi
  - peltak.extra.version

# Configure what gets deleted when running `peltak clean`
clean:
  exclude:
    - ".tox"
    - ".venv"


# Configure your docker registry and images within the project
docker:
  registry: docker.novocode.net


# Custom scripts
scripts:
  # root scripts
  lint:
    about: Run all checks (types, pep8, code style)
    root_cli: true
    files:
      paths:
        - src/peltak
        - test/unit
      include: "*.py"
      use_gitignore: true
    command: |
      set -e

      {{ 'mypy' | header }}
      pipenv run mypy --ignore-missing-imports {{ files | wrap_paths }}

      {{ 'pep8' | header }}
      pipenv run pep8 --config ops/tools/pep8.ini {{ files | wrap_paths }};

      {{ 'pylint' | header }}
      pipenv run pylint --rcfile ops/tools/pylint.ini {{ files | wrap_paths }}

      {{ 'done' | header }}

  test:
    about: Run unit tests
    root_cli: true
    options:
      - name: ['--no-sugar']
        is_flag: true
        about: Disable pytest-sugar. Might be useful for CI runs.
    command: |
      set -e

      pytest \
          -c ops/tools/pytest.ini \
          --cov-config=ops/tools/coverage.ini \
          --cov={{ conf.src_path }} \
          --cov-report=term \
          --cov-report=html:{{ conf.build_dir }}/coverage \
          {{ ctx.verbose | count_flag('v') }} \
          {{ '-p no:sugar' if opts.no_sugar else '' }} \
          test/unit

      {% set cov_path = proj_path(conf.build_dir, 'coverage/index.html') %}
      {{ '<32>HTML report: <34>file://{}' | cprint(cov_path) }}

  # run scripts
  lint-commit:
    about: Perform all checks on files staged for commit
    files:
      paths:
        - src/peltak
        - test/unit
      only_staged: true
      include: "*.py"
      use_gitignore: true
    command: |
      set -e

      {% if files %}
        {{ 'mypy' | header }}
        mypy --ignore-missing-imports {{ files | wrap_paths }}

        {{ 'pep8' | header }}
        pep8 --config ops/tools/pep8.ini {{ files | wrap_paths }};

        {{ 'pylint' | header }}
        pylint --rcfile ops/tools/pylint.ini {{ files | wrap_paths }}

        {{ 'done' | header }}
      {% else %}
        {{ '<90>No relevant staged files - skipping lint...' | cprint }}
      {% endif %}

  cov-core:
    about: Generate coverage report for peltak.core
    command: |
      set -e

      pipenv run pytest \
          -c ops/tools/pytest.ini \
          --cov-config=ops/tools/coverage.ini \
          --cov={{ conf.src_path }}/core \
          --cov-report=term \
          --cov-report=html:{{ conf.build_dir }}/coverage/core \
          test/unit

      {% set cov_path = proj_path(conf.build_dir, 'coverage/core/index.html') %}
      {{ '<32>HTML report: <34>file://{}' | cprint(cov_path) }}

  cov-extra:
    about: Generate coverage report for peltak.extra
    command: |
      set -e

      pipenv run pytest \
          -c ops/tools/pytest.ini \
          --cov-config=ops/tools/coverage.ini \
          --cov={{ conf.src_path }}/extra \
          --cov-report=term \
          --cov-report=html:{{ conf.build_dir }}/coverage/extra \
          test/unit

      {% set cov_path = proj_path(conf.build_dir, 'coverage/extra/index.html') %}
      {{ '<32>HTML report: <34>file://{}' | cprint(cov_path) }}

  cov-scripts:
    about: Generate coverage report for peltak.extra.scripts
    command: |
      pipenv run pytest \
          -c ops/tools/pytest.ini \
          --cov-config=ops/tools/coverage.ini \
          --cov={{ conf.src_path }}/extra/scripts \
          --cov-report=term \
          --cov-report=html:{{ conf.build_dir }}/coverage/scripts \
          test/unit

      {% set cov_path = proj_path(conf.build_dir, 'coverage/scripts/index.html') %}
      {{ '<32>HTML report: <34>file://{}' | cprint(cov_path) }}

  docs:
    about: Generate sphinx documentation
    root_cli: true
    options:
      - name: ['--recreate']
        about: Delete build and out directories before running.
        is_flag: true
      - name: ['--run-doctests']
        about: Also run all doctests.
        is_flag: true
    command: |
      {% if opts.recreate %}
        {{ 'Cleaning after previous builds' | header }}

        {{ '<91>Deleting <94>docs/html' | cprint }}
        rm -rf docs/html

        {{ '<91>Deleting <94>.build/docs' | cprint }}
        rm -rf .build/docs
      {% endif %}

      {{ 'Generating documentation' | header }}
      pipenv run sphinx-build \
          -b html \
          -d {{ conf.build_dir }}/docs \
          docs/src docs/html

      {% if opts.run_doctests %}
        {{ 'Running doctests' | header }}
        pipenv run sphinx-build \
            -b doctest \
            -d {{ conf.build_dir }}/docs \
            docs/src docs/doctest
      {% endif %}

  release-docs:
    about: Build documentation and deploy to github pages
    command: |
      peltak docs
      git checkout gh-pages
      cp -r docs/html/* ./
      git add .
      git config user.email ${GIT_EMAIL}
      git config user.name ${GIT_USER}
      git commit -nm "Docs build #${CIRCLECI_BUILD_NUM}"
      git push --no-verify origin gh-pages

