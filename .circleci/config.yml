version: 2

jobs:
  build:
    docker:
      - image: novopl/python36:ci-alpine
    steps:
      - checkout
      - restore_cache:
          key: deps-rev3-{{ checksum "Pipfile.lock" }}

      - run:
          name: Setup peltak
          command: |
            export PIPENV_VENV_IN_PROJECT=1
            export PIPENV_IGNORE_VIRTUALENVS=1

            echo '== which pip ============================================='
            which pip
            echo '== which python =========================================='
            which python
            echo '== python --version ======================================'
            python --version
            echo '== whoami ================================================'
            whoami
            echo '== pipenv lock -d --requirements ========================='
            pipenv lock -d --requirements | tee requirements.txt
            echo '== pipenv sync -d ========================================'
            pipenv sync -d
            echo '=========================================================='

      - save_cache:
          key: deps-rev3-{{ checksum "Pipfile.lock" }}
          paths:
            - /usr/local/bin
            - /usr/local/lib/python3.6/site-packages
            - .venv

      - run:
          name: Lint
          command: |
            export PIPENV_VENV_IN_PROJECT=1
            export PIPENV_IGNORE_VIRTUALENVS=1

            pipenv run peltak lint

      - restore_cache:
          name: Restore tox cache
          key: tox-rev1-{{ checksum "requirements.txt" }}

      - run:
          name: Test
          command: |
            export PIPENV_VENV_IN_PROJECT=1

            pipenv run tox

      - save_cache:
          name: Save tox cache
          key: tox-rev1-{{ checksum "requirements.txt" }}
          paths:
            - .tox

      - run:
          name: Build Documentation
          command: |
            export PIPENV_VENV_IN_PROJECT=1

            pipenv run peltak docs --recreate --run-doctests
            mv docs/html docs/peltak-docs
            cd docs && zip -r ../.build/peltak-docs.zip peltak-docs

      - store_test_results:
          path: .build
      - store_artifacts:
          path: .build/coverage/
          destination: coverage
      - store_artifacts:
          path: .build/peltak-docs.zip


  release:
    docker:
      - image: novopl/python36:ci-alpine
    steps:
      - checkout
      - restore_cache:
          key: deps-rev3-{{ checksum "Pipfile.lock" }}

      - run:
          name: Setup peltak
          command: |
            export PIPENV_VENV_IN_PROJECT=1

            echo '== pipenv install -d ====================================='
            pipenv install -d
            echo '=========================================================='

      - run:
          name: Upload to pypi
          command: |
            export PIPENV_VENV_IN_PROJECT=1

            pipenv run peltak pypi configure
            pipenv run peltak pypi upload pypi
            rm ~/.pypirc

      - run:
          name: Create release tag
          command: |
            pipenv run peltak release tag -m "$(pipenv run peltak changelog)"
            git push origin v$(pipenv run peltak version --porcelain)

  docs:
    docker:
      - image: novopl/python36:ci-alpine
    steps:
      - checkout
      - restore_cache:
          key: deps-rev3-{{ checksum "setup.py" }}

      - run:
          name: Setup
          command: |
            export PIPENV_VENV_IN_PROJECT=1

            echo '== peltak sync -d ========================================'
            time pipenv sync -d
            echo '== peltak --help ========================================='
            pipenv run peltak --help
            echo '=========================================================='

      - run:
          name: Build docs
          command: |
            export PIPENV_VENV_IN_PROJECT=1

            pipenv run peltak docs

      - run:
          name: Deploy gh-pages
          command: |
            git checkout gh-pages
            cp -r docs/html/* ./
            git add .
            git config user.email ${GIT_EMAIL}
            git config user.name ${GIT_USER}
            git commit -nm "Docs build #${CIRCLECI_BUILD_NUM}"
            git push --no-verify origin gh-pages

workflows:
  version: 2
  main:
    jobs:
      - build
      - release:
          requires:
            - build
          filters:
            branches:
              only: master
      - docs:
          requires:
            - build
          filters:
            branches:
              only: master
