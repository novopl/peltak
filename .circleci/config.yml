version: 2

jobs:
  build:
    docker:
      - image: novopl/python36:ci-alpine
    steps:
      - checkout
      - restore_cache:
          key: deps-{{ checksum ".circleci/config.yml" }}-{{ checksum "poetry.lock" }}

      - run:
          name: Setup peltak
          command: |
            echo '== pwd ==================================================='
            pwd
            echo '== which pip ============================================='
            which pip
            echo '== which python =========================================='
            which python
            echo '== python --version ======================================'
            python --version
            echo '== whoami ================================================'
            whoami
            echo '== poetry install ========================================'
            poetry config virtualenvs.in-project true
            poetry show -v
            poetry install --no-ansi
            echo '=========================================================='

      - run:
          name: Checks
          command: poetry run peltak check

      - run:
          name: Test
          command: poetry run peltak test

      - save_cache:
          key: deps-{{ checksum ".circleci/config.yml" }}-{{ checksum "poetry.lock" }}
          paths:
            - /usr/local/bin
            - /usr/local/lib/python3.6/site-packages
            - .venv
            - .mypy_cache
            - .pytest_cache

      - run:
          name: Build Documentation
          command: |
            poetry run peltak docs --recreate
            mv docs/html docs/peltak-docs
            cd docs && zip -r ../.build/peltak-docs.zip peltak-docs

      - store_test_results:
          path: .build
      - store_artifacts:
          path: .build/coverage/
          destination: coverage
      - store_artifacts:
          path: .build/peltak-docs.zip


  release:
    docker:
      - image: novopl/python36:ci-alpine
    steps:
      - checkout
      - restore_cache:
          key: deps-{{ checksum ".circleci/config.yml" }}-{{ checksum "poetry.lock" }}

      - run:
          name: Setup peltak
          command: poetry install -n --no-ansi

      - run:
          name: Upload to pypi
          command: |
            poetry run peltak pypi configure
            poetry run peltak pypi upload pypi
            rm ~/.pypirc

      - run:
          name: Create release tag
          command: |
            poetry run peltak release tag -m "$(potery run peltak changelog)"
            git push origin v$(poetry run peltak version --porcelain)

  docs:
    docker:
      - image: novopl/python36:ci-alpine
    steps:
      - checkout
      - restore_cache:
          key: deps-{{ checksum ".circleci/config.yml" }}-{{ checksum "poetry.lock" }}

      - run:
          name: Setup
          command: |
            echo '== poetry install ========================================'
            time poetry install
            echo '== peltak --help ========================================='
            poetry run peltak --help
            echo '=========================================================='

      - run:
          name: Build docs
          command: poetry run peltak docs

      - run:
          name: Deploy gh-pages
          command: |
            git checkout gh-pages
            cp -r docs/html/* ./
            git add .
            git config user.email ${GIT_EMAIL}
            git config user.name ${GIT_USER}
            git commit -nm "Docs build #${CIRCLECI_BUILD_NUM}"
            git push --no-verify origin gh-pages

workflows:
  version: 2
  main:
    jobs:
      - build:
          filters:
            branches:
              ignore: [gh-pages]
      - release:
          requires:
            - build
          filters:
            branches:
              only: master
      - docs:
          requires:
            - build
          filters:
            branches:
              only: master
