[tool.poetry]
name = "peltak"
version = "0.27.5"
description = "A command line tool to help manage a project"
readme = "README.rst"
repository = "http://github.com/novopl/peltak"
homepage = "http://novopl.github.com/peltak"
documentation = "http://novopl.github.com/peltak"
authors = ["Mateusz Klos <novopl@gmail.com>"]
license = "Apache 2.0"
classifiers = [
    "Development Status :: 4 - Beta",
    "Topic :: Utilities",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "License :: OSI Approved :: MIT License",
]
packages = [
    { include = "peltak", from = "src" },
    { include = "cliform", from = "src" },
    { include = "peltak_appengine", from = "src" },
    { include = "peltak_django", from = "src" },
]
include = ["LICENSE", "AUTHORS", "README.rst"]
exclude = ["docs/**"]

[tool.poetry.scripts]
peltak = 'peltak.main:root_cli'

[tool.poetry.dependencies]
python = "^3.6"
click = "~=7.0"
PyYAML = ">=5.1.2"
six = ">=1.11"
attrs = ">=18.2"
jinja2 = ">=2.10.3"
pygments = ">=2.3.1"
tomlkit = "^0.7.0"

[tool.poetry.dev-dependencies]
coverage = "~=5.3"
factory-boy = "~=2.11"
more-itertools = "<=5.0.0"
mypy = {version = "==0.790",markers = "python_version >= '3.5'"}
psutil = "~=5.7.3"
pycodestyle = "~=2.6.0"
pylint = "~=2.6.0"
pytest = "~=6.1.2"
pytest-cov = "~=2.10.1"
pytest-sugar = "~=0.9.4"
Sphinx = ">=3.3.1"
sphinx-refdoc = "~=0.3.0"
sphinxcontrib-plantuml = "~=0.17.1"
requests = "~=2.25.0"
flake8 = "^3.8.4"
sphinx-material = "^0.0.32"
sphinx-autodoc-typehints = "^1.11.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.peltak]
pelconf_version = "0"
python_paths = ["src"]
build_dir = ".build"
commands = [
  "peltak.extra.changelog",
  "peltak.extra.git",
  "peltak.extra.gitflow",
  "peltak.extra.pypi",
  "peltak.extra.version"
]

[tool.peltak.version]
files = [
    "pyproject.toml",
    "src/peltak/__init__.py",
]

[tool.peltak.clean]
exclude = [ ".venv" ]

[tool.peltak.changelog]
    [[tool.peltak.changelog.tags]]
    tag = 'feature'
    header = 'Features'

    [[tool.peltak.changelog.tags]]
    tag = 'fix'
    header = 'Fixes'

    [[tool.peltak.changelog.tags]]
    tag = 'change'
    header = 'Changes'

    [[tool.peltak.changelog.tags]]
    tag = 'dev'
    header = 'Dev tasks'

[tool.peltak.scripts.check]
root_cli = true
about = "Run all checks (types, pep8, code style)"
command_file = "ops/scripts/check.sh.j2"

    [tool.peltak.scripts.check.files]
    paths = [ "src/peltak", "test/unit" ]
    include = "*.py"
    use_gitignore = true

[tool.peltak.scripts.test]
root_cli = true
about = "Run unit tests"
command_file = "ops/scripts/test.sh.j2"

    [[tool.peltak.scripts.test.options]]
    name = [ "--no-sugar" ]
    about = "Disable pytest-sugar. Might be useful for CI runs."
    is_flag = true

    [[tool.peltak.scripts.test.options]]
    name = [ "--cov" ]
    type = "str"
    default = "all"
    about = """
    What type of coverage should we define. Allowed values are:
    all/core/scripts/extra. Defaults to 'all'.
    """

    [[tool.peltak.scripts.test.options]]
    name = [ "-k", "--kind" ]
    type = "str"
    default = "all"
    about = """
    What kind of tests should be ran (all/unit/e2e/doctest). If not given, then all
    tests will run.
    """

[tool.peltak.scripts.docs]
root_cli = true
about = "Generate sphinx documentation"
command_file = "ops/scripts/docs.sh.j2"

    [[tool.peltak.scripts.docs.options]]
    name = [ "--recreate" ]
    about = "Delete build and out directories before running."
    is_flag = true

    [[tool.peltak.scripts.docs.options]]
    name = [ "--run-doctests" ]
    about = "Also run all doctests."
    is_flag = true

[tool.peltak.scripts.check-commit]
about = "Perform all checks on files staged for commit"
command_file = "ops/scripts/check.sh.j2"

    [tool.peltak.scripts.check-commit.files]
    paths = [ "src/peltak", "test/unit" ]
    only_staged = true
    include = "*.py"
    use_gitignore = true

[tool.peltak.scripts.pr-release]
root_cli = true
about = "Create PR for the current release branch"
command = """
gh pr create \
    --repo novopl/peltak \
    --title "Release: v$(peltak version --porcelain)" \
    --body "$(peltak changelog)"
"""
