# peltak configuration file
# Visit https://novopl.github.io/peltak for more information
pelconf_version: '0'
commands:
  - peltak.extra.changelog
  - peltak.extra.git
  - peltak.extra.gitflow
  - peltak.extra.version


python_paths: ['src']
build_dir: .build

version:
  files:
    - pyproject.toml
    - src/peltak_pypi/__init__.py


changelog:
  tag_format: '{tag}:'
  tags:
    - tag: feature
      header: Features
    - tag: fix
      header: Fixes
    - tag: change
      header: Changes
    - tag: dev
      header: Dev tasks
    - tag: refactor
      header: Refactored


clean:
  patterns:
    - '*.mypy_cache'
    - '*.pytest_cache'
    - '*.build'
    - '*__pycache__'
  exclude:
    - .venv


scripts:
  test:
    root_cli: true
    about: Run tests
    options:
      - name: ['-k', '--kind']
        about: 'Kind of tests to run: all/unit/doctest. Defaults to all.'
        type: str
        default: all
      - name: ['-no-sugar']
        about: Disable pytest-sugar. Might be useful for CI runs.
        is_flag: true
      - name: ['--cov-xml']
        about: Generate junit XML coverage report. Useful for 3rd party integrations.
        is_flag: true
    command_file: ops/scripts/test.sh.j2

  check:
    root_cli: true
    about: 'Run all checks (types, pep8, code style)'
    options:
      - name: ['--fix']
        is_flag: true
        about: Attempt to fix some of the failed checks (like isort).
    files:
      paths:
        - src/peltak_pypi
        - tests
      include: '*.py'
      use_gitignore: true
    command_file: ops/scripts/check.sh.j2

  check-commit:
    about: Perform all checks on files staged for commit
    files:
      paths:
        - src/peltak_pypi
        - tests
      only_staged: true
      include: '*.py'
      use_gitignore: true
    command_file: ops/scripts/check.sh.j2

  docs:
    root_cli: true
    about: Generate sphinx documentation
    options:
      - name: ['--recreate']
        about: Delete build and out directories before running.
        is_flag: true
      - name: ['--run-doctests']
        about: Also run all doctests.
        is_flag: true
    command_file: ops/scripts/docs.sh.j2


  make-release:
    root_cli: true
    about: Create a release commit
    options:
      - name: ['-t', '--type']
        about: "Type of release to make: patch|minor|major. Defaults to 'patch'."
        type: str
        default: patch
    command: |

      {{ "-- <32>Creating <95>{}<32> release" | cprint(opts.type) }}

      poetry run peltak version bump {{ opts.type }}
      git add pyproject.toml src/ezfilter/__init__.py


      peltak changelog > .RELEASE_CHANGELOG
      echo "Release: $(peltak version --porcelain)\n" > .RELEASE_COMMIT_MSG
      peltak changelog > .RELEASE_COMMIT_MSG

      git commit -F .RELEASE_COMMIT_MSG
      peltak release tag -m "$(cat .RELEASE_CHANGELOG)"

      rm .RELEASE_CHANGELOG .RELEASE_COMMIT_MSG

  build:
    root_cli: true
    about: Build PyPI package.
    command: poetry build

  publish:
    root_cli: true
    about: Publish to PyPI repo
    options:
      - name: ['-r', '--repo']
        about: Target PyPI repository.
        type: str
        default: novocode-dev
      - name: ['-n', '--dry-run']
        about: Target PyPI repository.
        is_flag: true
      - name: ['-u', '--username']
        about: PyPI repo username
        type: str
      - name: ['-p', '--password']
        about: PyPI repo password
        type: str
    command: |
      poetry publish \
      {{ ('-r ' + opts.repo) if opts.repo else '' }} \
      {{ '--dry-run' if opts.dry_run else '' }} \
      {{ '-u {}'.format(opts.username) if opts.username else '' }} \
      {{ '-p {}'.format(opts.password) if opts.password else '' }}
      
